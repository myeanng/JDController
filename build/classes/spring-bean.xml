<?xml version="1.0" encoding="UTF-8"?>
<!--Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	you under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/data/jpa
       	http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
       	http://www.springframework.org/schema/data/repository
    	http://www.springframework.org/schema/data/repository/spring-repository-1.6.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/task 
        http://www.springframework.org/schema/task/spring-task.xsd">

	<!-- 在Spring中，bean作用域用于确定哪种类型的 bean 实例应该从Spring容器中返回给调用者。bean支持的5种范围域： 
	1.单例 - 每个Spring IoC 容器返回一个bean实例；	
	2.原型- 当每次请求时返回一个新的bean实例；	
	3.请求 - 返回每个HTTP请求的一个Bean实例；	
	4.会话 - 返回每个HTTP会话的一个bean实例；	
	5.全局会话- 返回全局HTTP会话的一个bean实例； 	
	在大多数情况下，可能只处理了 Spring 的核心作用域 - 单例和原型，默认作用域是单例。 
	注：意味着只有在一个基于web的Spring ApplicationContext情形下有效！ -->
	<!-- 现在指定这个bean作用域为原型 -->
	<bean id="customer" class="bean.impl.Customer" scope="prototype">
		<!-- 快捷方式：注入值“value”属性 -->
		<property name="name" value="customer!">
		</property>
	</bean>
	<!-- “p” 模式：注入值,通过使用“p”模式作为注入值到一个属性。 -->
	<bean id="scheduler" class="bean.impl.Scheduler" p:name="scheduler!">
	</bean>
	<bean id="helloSpring" class="hello.HelloSpring">
		<!-- 正常方式：注入值，在一个“value”标签注入值，并附有“property”标签结束。 -->
		<property name="name">
			<value>word!</value>
		</property>
		<!-- 构造注入 -->
		<constructor-arg>
			<!-- 注入类 
			<bean class="bean.impl.Customer"/>
			-->
			<!-- 引用配置的bean -->
			<ref bean="customer"/>
			<!-- 在同一个配置文件的bean
			<ref local="Customer"/> 
			-->
			<!-- 也可以使用内部bean的形式 
			<bean class="bean.impl.Scheduler">
				<property name="name" value="name" />
			</bean>
			-->
		</constructor-arg>
		<!-- set注入 -->
		<property name="scheduler">
			<ref bean="scheduler"/>
			<!-- 也可以使用内部bean的形式 
			<bean class="bean.impl.Scheduler">
				<property name="name" value="name" />
			</bean>
			-->
		</property>
	</bean>
</beans>
